name       : llvm-roc
version    : 5.0.1
release    : 1
source     :
    - https://github.com/RadeonOpenCompute/llvm-project/archive/refs/tags/rocm-5.0.1.tar.gz : 77e252720de65a1dd43a92d3589b350b5a90b60990cb4afa7ac95b2ba759c8f4
homepage   : https://github.com/RadeonOpenCompute/llvm-project
license    : Apache-2.0-with-LLVM-exception
summary    :
    - Low Level Virtual Machine, customized for ROCm
    - clang : Clang Compiler frontend to LLVM
    - clang-devel : Development files for building clang plugins
component  :
    - programming.devel
libsplit   : no
clang      : yes
builddeps  :
    - pkgconfig(libelf)
    - pkgconfig(libffi)
    - pkgconfig(libxml-2.0)
    - pkgconfig(ncursesw)
    - pkgconfig(libedit)
    - glibc-devel
    - libgcc
    - libstdc++
    - llvm-devel
    - python-recommonmark
    - swig
    - zlib-devel
rundeps    :
    - clang :
        - llvm-roc-devel
    - clang-devel :
        - llvm-roc-clang
description: |
    The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Despite its name, LLVM has little to do with traditional virtual machines. The name "LLVM" itself is not an acronym; it is the full name of the project.
patterns   :
    - clang-devel :
        - /usr/include/clang*
        - /usr/include/lld*
        - /usr/include/openmp*
        - /usr/lib64/libclang*.a
    - clang :
        - /usr/bin
        - /usr/libexec
        - /usr/lib64/clang
        - /usr/lib64/libclang*.so*
        - /usr/lib64/SampleAnalyzerPlugin.so
        - /usr/lib64/CheckerOptionHandlingAnalyzerPlugin.so
        - /usr/lib64/CheckerDependencyHandlingAnalyzerPlugin.so
        - /usr/share/man/*/*clang*
        - /usr/share/man/*/*scan-build*
        - /usr/share/llvm/cmake
        - /usr/share/clang
        - /usr/share/opt-viewer
        - /usr/share/scan-build
        - /usr/share/scan-view
    - devel :
        - /usr/bin/FileCheck
        - /usr/bin/bugpoint
        - /usr/bin/count
        - /usr/bin/dsymutil
        - /usr/bin/lli*
        - /usr/bin/llc*
        - /usr/bin/llvm*
        - /usr/bin/not
        - /usr/bin/obj2yaml
        - /usr/bin/opt
        - /usr/bin/sancov
        - /usr/bin/sanstats
        - /usr/bin/verify-uselistorder
        - /usr/bin/yaml-bench
        - /usr/bin/yaml2obj
        - /usr/share/llvm/cmake
replaces   :
    - llvm
    - clang : clang
    - clang-devel : clang-devel
environment: |
    # Decontaminate build environment
    unset LDFLAGS
    unset LD_AS_NEEDED

    # Set build flags
    export _LLVM_TRIPLE="%HOST%"
    export _LLVM_ARCH="x86_64"
    export CC=clang
    export CXX=clang++

    export _PROJECTS="clang;clang-tools-extra;compiler-rt;lld;llvm;openmp;mlir"
    export _RUNTIMES="libcxx;libcxxabi"
    export _TARGETS="AMDGPU;X86"

    export _OFFLOAD_ARCH="gfx1010"

    # Enable identical code folding to reduce size on disc
    export LDFLAGS="${LDFLAGS} -Wl,--icf=all"
setup      : |
    # Apply necessary patches (TODO)

    # Configure
    export llvmdir=%libdir%/llvm/roc
    pushd llvm
    %cmake_ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=$llvmdir \
        -DCLANG_DEFAULT_LINKER="lld" \
        -DCLANG_DEFAULT_OBJCOPY="llvm-objcopy" \
        -DENABLE_EXPERIMENTAL_NEW_PASS_MANAGER=ON \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_LIBDIR_SUFFIX=%LIBSUFFIX% \
        -DLLVM_TARGET_ARCH=$_LLVM_ARCH \
        -DLLVM_BINUTILS_INCDIR=$llvmdir/include \
        -DLLVM_DEFAULT_TARGET_TRIPLE=$_LLVM_TRIPLE \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_PROJECTS=$_PROJECTS \
        -DLLVM_ENABLE_RUNTIMES=$_RUNTIMES \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DENABLE_LINKER_BUILD_ID=ON \
        -DLLVM_ENABLE_PIC=ON \
        -DLLVM_TARGETS_TO_BUILD=$_TARGETS \
        -DLLVM_OFFLOAD_ARCH=$_OFFLOAD_ARCH \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DCLANG_LINK_CLANG_DYLIB=ON \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_ENABLE_SPHINX=OFF \
        -DLLVM_ENABLE_DOXYGEN=OFF \
        -DLLVM_ENABLE_OCAMLDOC=OFF \
        -DLLVM_VERSION_SUFFIX=roc \
        -DOCAMLFIND=OFF .
    popd
build      : |
    pushd llvm
    %ninja_build -j8
install    : |
    pushd llvm
    %ninja_install
    popd

    # TODO: Finish up install